Cave - Daniel Rashevsky
 - Let the user know if a file is missing. Your game shouldn't crash.
 - Room (and all the methods that access it) shouldn't be static. If your Cave object is destroyed, your room should go with it. This will be useful later if we want to start a new game or load a different map.
 - Document your file format.
 - Consider making a way to visualize the map for debugging (something like "printMap")
 - Not clear why adjacentRooms returns 6 items instead of 8? Also, it will be difficult for the caller to interpret the result. An enum might help.
 - I like the tester. It would be good to have tests that fail if there's an error, so you don't have to carefully inspect the output to see if there's a mistake.

GameControl - Eric Anderson
 - Main method shouldn't catch exceptions. Catch the error and print a message. Your game shouldn't crash if files are missing.
 - Objects (e.g. Cave) will need to be member variables on the GameControl (ideally private). 
 - Other than main, avoid static methods, since they will force all of your members to be static as well.
 	- You'll still want to let other objects talk to GameControl, so either pass GameControl into those objects or create a static 'Instance' variable. Example:
 		public static GameObject Instance
 		...
 		main { 
 		    Instance = this
 		 }

GameLocations - Shrey Srivastava
 - Instead of 'map' variable, should either have a Cave member variable, or go through GameControl to talk to Cave. Let Cave worry about the details on how the map works and how it's stored.
 - 'player' and 'wumpus' variables are shadowed in the constructor (so the member variables are unmodified)

GraphicalInterface - Raj Ajmera
 - This class has a second 'main' method (GameControl is the other)
 - This class seems to do a lot of good stuff, but all I get is a giant 'Play' button (that doesn't work)
 - Do we have someone who can do art for the graphical interface?
  - Things to try:
    - Load some images. Some images like the player might have transparent backgrounds
    - Animate those images by moving them around or rotating them.
    - Animate those images by playing a series of images (sprite animation). Warning: this is hard.

HighScore - Deepayan Sanyal
 - Not much here

Player - Missing Name?
 - Not much here. Consider adding some test cases (example: verify purchaseArrows(1) returns false)

Room - Daniel Rashevsky
 - Thought: Should getConnectedRooms return an array of Rooms?

Trivia - Deepayan Sanyal
 - There's a few errors in the first Trivia constructor (example: all the scanners add to the questions list)
 - How are you going to correlate questions with correct / incorrect answers?
 - This class can be tested by itself with a console app that just asks questions and checks if you get the right answers.